import { createSlice, nanoid, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import { Dashboard, DashboardElement, Sheet } from "../../types/types";
import { dashboardAdded } from "../dashboard/dashboardSlice";
import { dashboardElementAdded } from "../dashboardElement/dashboardElementSlice";

export type SheetState = Record<string, Sheet>;

const initialState: SheetState = {};

export const sheetSlice = createSlice({
  name: "sheet",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    sheetAdded: {
      reducer(
        state,
        action: PayloadAction<{ dashboardId: string; sheet: Sheet }>
      ) {
        console.log("add sheet", action);
        state[action.payload.sheet.id] = action.payload.sheet;
      },
      prepare(dashboardId: string) {
        return {
          payload: {
            dashboardId,
            sheet: {
              id: nanoid(),
              bgColor: "cyan",
              dashboardElementsIds: [],
            },
          },
        };
      },
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(
        dashboardAdded.type,
        (state, action: PayloadAction<{ dashboard: Dashboard }>) => {
          const sheetId = action.payload.dashboard.sheetsIds[0];
          state[sheetId] = {
            id: sheetId,
            bgColor: "cyan",
            dashboardElementsIds: [],
          };
        }
      )
      .addCase(
        dashboardElementAdded.type,
        (
          state,
          action: PayloadAction<{
            dashboardId: string;
            sheetId: string;
            dashboardElement: DashboardElement;
          }>
        ) => {
          console.log("extraReducers ", action);
          const sheetId = action.payload.sheetId;
          state[sheetId].dashboardElementsIds.push(
            action.payload.dashboardElement.id
          );
        }
      );
  },
});

export const { sheetAdded } = sheetSlice.actions;

export const selectSheets = (state: RootState) =>
  state.dashboardRoot.present.sheets;
export const selectSheetById = (state: RootState, sheetId: string) =>
  state.dashboardRoot.present.sheets[sheetId];

export default sheetSlice.reducer;
