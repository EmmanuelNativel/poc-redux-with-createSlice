import { createSlice, nanoid, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import { Dashboard, Sheet } from "../../types/types";
import { sheetAdded } from "../sheet/sheetSlice";

export type DashboardState = Record<string, Dashboard>;

const initialState: DashboardState = {};

export const dashboardSlice = createSlice({
  name: "dashboard",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    dashboardAdded: {
      reducer(state, action: PayloadAction<{ dashboard: Dashboard }>) {
        state[action.payload.dashboard.id] = action.payload.dashboard;
      },
      prepare(title: string) {
        return {
          payload: {
            dashboard: {
              id: nanoid(),
              title,
              sheetsIds: [nanoid()],
            },
          },
        };
      },
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(
      sheetAdded.type,
      (state, action: PayloadAction<{ dashboardId: string; sheet: Sheet }>) => {
        console.log("test4 action", action);
        state[action.payload.dashboardId].sheetsIds.push(
          action.payload.sheet.id
        );
      }
    );
  },
});

export const { dashboardAdded } = dashboardSlice.actions;

export const selectDashboards = (state: RootState) =>
  state.dashboardRoot.present.dashboards;

export default dashboardSlice.reducer;
